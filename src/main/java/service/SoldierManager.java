package service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import domain.Soldier;

public class SoldierManager {
	
	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	
	
	private String createTableSoldier = "CREATE TABLE Soldier(id int GENERATED BY DEFAULT AS IDENTITY, name varchar(20), rank varchar(20), yearOfService int)";
	private Statement statement;
	private PreparedStatement updateSoldierStmt;
	private PreparedStatement addSoldierStmt;
	private PreparedStatement deleteSoldierStmt;
	private PreparedStatement deleteAllSoldierStmt;
	private PreparedStatement getAllSoldierStmt;
	private PreparedStatement getSoldierByIDStmt;
	
	
	public SoldierManager() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Soldier".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}

			if (!tableExists)
				statement.executeUpdate(createTableSoldier);

			addSoldierStmt = connection
					.prepareStatement("INSERT INTO Soldier (name, rank, yearOfService) VALUES (?, ?, ?)");
			deleteAllSoldierStmt = connection
					.prepareStatement("DELETE FROM Soldier");
			getAllSoldierStmt = connection
					.prepareStatement("SELECT id, name, rank, yearOfService FROM Soldier");
			updateSoldierStmt = connection
					.prepareStatement("UPDATE Soldier set name = ?, rank = ?, yearOfService = ? WHERE id = ?");

			getSoldierByIDStmt = connection.prepareStatement("SELECT * FROM Soldier WHERE id = ?");
			deleteSoldierStmt = connection.prepareStatement("DELETE FROM Soldier WHERE id = ?");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	Connection getConnection() {
			return connection;
		}
	void clearSoldier() {
		try {
			deleteAllSoldierStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public int addSoldier(Soldier soldier) {
		int count = 0;
		try {
			addSoldierStmt.setString(1, soldier.getName());
			addSoldierStmt.setString(2, soldier.getRank());
			addSoldierStmt.setInt(3, soldier.getyearOfService());

			count = addSoldierStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	public Soldier getSoldierById(Soldier soldier){
		try
		{
			getSoldierByIDStmt.setInt(1, soldier.getId());
			ResultSet rs = getSoldierByIDStmt.executeQuery();
			
			while (rs.next())
			{
				soldier = new Soldier(rs.getString("name"), rs.getString("rank"), rs.getInt("yearOfService"));
				soldier.setId(rs.getInt("id"));
				return soldier;
			}
		}
	 catch (SQLException e)
	 {
		 e.printStackTrace();
	 }
	 return null;
	}
	public int deleteSoldier(Soldier soldier)
	{
	int count = 0;
	try
	{
	deleteSoldierStmt.setInt(1, soldier.getId());
	count = deleteSoldierStmt.executeUpdate();
	}
	catch (SQLException e)
	{
	e.printStackTrace();
	}
	return count;
	}
	public int updateSoldier(Soldier soldier)
	{
	int count = 0;
	try
	{
		updateSoldierStmt.setString(1, soldier.getName());
		updateSoldierStmt.setString(2, soldier.getRank());
		updateSoldierStmt.setInt(3, soldier.getyearOfService());
		updateSoldierStmt.setInt(4, soldier.getId());
		count = updateSoldierStmt.executeUpdate();
	}
	catch (SQLException e)
	{
	e.printStackTrace();
	}
	return count;
	}

	public List<Soldier> getAllSoldier() {
		List<Soldier> soldier = new ArrayList<Soldier>();

		try {
			ResultSet rs = getAllSoldierStmt.executeQuery();

			while (rs.next()) {
				Soldier p = new Soldier();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setRank(rs.getString("rank"));
				p.setyearOfService(rs.getInt("yearOfService"));
				soldier.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return soldier;
	}
}
